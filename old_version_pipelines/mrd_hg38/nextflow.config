/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    OncoGS_LB Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

manifest {
    name            = 'OncoGS_LB'
    author          = """Tien-Anh Nguyen, Anh-Duong Doan"""
    homePage        = 'https://genesolutions.vn'
    description     = """Cancer-targeted gene testing pipeline for LB sample"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = 'v0.0.1'
    doi             = ''
}

// Global default params, used in configs
params {
    
    // Input/output options
    fqdir           = null
    outdir          = 'results'

    // Database, reference
    index           = "${projectDir}/data/bwa"
    fasta           = "${projectDir}/data/bwa/hg38_selected.fa"
    fai             = "${projectDir}/data/bwa/hg38_selected.fa.fai"
    dict            = "${projectDir}/data/bwa/hg38_selected.dict"

    // Boilerplate options
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'link' // symlink, link, copy, move, rellink, copyNoFollow
    monochrome_logs            = false
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = "config_profile_description,config_profile_name"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '750.GB'
    max_cpus                   = 256
    max_time                   = '48.h'

    gc_wig          = "${projectDir}/data/ichorcna/gc_hg38_1000kb.wig"
    map_wig         = "${projectDir}/data/ichorcna/map_hg38_1000kb.wig"
    ichorcna_pon    = "${projectDir}/data/ichorcna/HD_ULP_PoN_hg38_1Mb_median_normAutosome_median.rds"
    centromere      = "${projectDir}/data/ichorcna/GRCh38.GCA_000001405.2_centromere_acen.txt"

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    slurm {
        process.executor = 'slurm'
        process.clusterOptions = "--export=ALL"
    }
    research {
        process {
            executor = 'slurm'
            clusterOptions = "--export=ALL"
            queue = "commercial_low"
            
            withLabel: dragen {
                queue = "dragen_low"
                clusterOptions = "--exclusive"
                cpus = 64
                memory = 480.GB
                time = 24.h
                container = null
            }
        }

    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    debug { process.beforeScript = 'echo $HOSTNAME' }
}

// execution report
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


def savefile (filename) {

    c1 = filename.endsWith('.bam')
    c2 = filename.endsWith('.bai')
    c3 = filename.endsWith('.fastq.gz')
    c4 = filename.endsWith('.fastq')
    c5 = filename.endsWith('versions.yml')
    c6 = filename.endsWith('mqc.yml')
    c7 = filename.endsWith('multiqc_citations.txt')
    c8 = filename.endsWith('multiqc_sources.txt')
    c9 = filename.endsWith('.sam')

    res = c1 || c2 || c3 || c4 || c5 || c6 || c7 || c8 || c9 ? null : filename

    return res
}

def savenull (filename) {
    return null
}